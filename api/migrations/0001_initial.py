# Generated by Django 2.2.24 on 2025-08-23 08:04

import backend.storage_backends
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('location', models.TextField(blank=True, null=True)),
                ('description', models.CharField(max_length=160)),
                ('hours', models.TextField(blank=True, null=True)),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('website', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Live')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='BusinessPagePhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(storage=backend.storage_backends.BusinessPagePhotoStorage(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='CalendarEventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categoryy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userId', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=1000)),
                ('description', models.TextField()),
                ('username', models.TextField()),
                ('image', models.ImageField(storage=backend.storage_backends.ImagenText(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('sell', models.DecimalField(decimal_places=3, max_digits=100)),
                ('buy', models.DecimalField(decimal_places=3, max_digits=100)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('leader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leader', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, null=True, related_name='members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Imagen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('description', models.TextField()),
                ('image', models.ImageField(storage=backend.storage_backends.ImagenText(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=9)),
            ],
        ),
        migrations.CreateModel(
            name='ListingImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(storage=backend.storage_backends.ListingImageStorage(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='NewCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='NewPeticionCommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NuevoTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('completed', models.BooleanField(default=False)),
                ('username', models.TextField(blank=True, default='')),
                ('categories', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Petition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(storage=backend.storage_backends.ProfileImageStorage(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Thumbnail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(storage=backend.storage_backends.ThumbnailStorage(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='TuModelo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campo1', models.CharField(max_length=100)),
                ('campo2', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(storage=backend.storage_backends.SignatureStorage(), upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='YOI_Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=100, null=True)),
                ('allergies', models.CharField(blank=True, max_length=1000, null=True)),
                ('size', models.PositiveSmallIntegerField(choices=[(0, 'XS'), (1, 'S'), (2, 'M'), (3, 'L'), (4, 'XL'), (5, '12/14'), (6, '14/16'), (7, 'Other')], default=2)),
                ('payment_complete', models.BooleanField(default=False)),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Male'), (1, 'Female'), (2, 'Unknown')], default=2)),
                ('translation_assistance', models.BooleanField(default=False)),
                ('spanish_shirt', models.BooleanField(default=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='YOI_Assistant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('phoneNumber', models.CharField(blank=True, max_length=255, null=True)),
                ('attended', models.CharField(max_length=255)),
                ('years', models.CharField(max_length=255)),
                ('reasonOne', models.CharField(max_length=1500)),
                ('reasonTwo', models.CharField(max_length=1500)),
                ('giftOne', models.CharField(max_length=1500)),
                ('giftTwo', models.CharField(max_length=1500)),
                ('giftThree', models.CharField(max_length=1500)),
                ('suggestionOne', models.CharField(max_length=1500)),
                ('suggestionTwo', models.CharField(max_length=1500)),
                ('suggestionThree', models.CharField(max_length=1500)),
                ('classOne', models.CharField(max_length=1500)),
                ('classTwo', models.CharField(max_length=1500)),
                ('signature', models.CharField(max_length=1500)),
                ('created', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VotingForAmmonSurveyEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voting_for_ammon', models.BooleanField()),
                ('comment', models.TextField(blank=True, max_length=300, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='api.NuevoTask')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleListing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available', models.BooleanField(default=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('expire_date', models.DateTimeField()),
                ('description', models.TextField(blank=True, null=True)),
                ('favorites', models.IntegerField(default=0)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('views', models.IntegerField(default=0)),
                ('callEnabled', models.BooleanField(default=True)),
                ('contact_email', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=100, null=True)),
                ('emailEnabled', models.BooleanField(default=True)),
                ('textEnabled', models.BooleanField(default=True)),
                ('body_style', models.PositiveSmallIntegerField(choices=[(1, 'Coupe'), (2, 'Truck'), (3, 'Sedan'), (4, 'Hatchback'), (5, 'SUV'), (6, 'Convertible'), (7, 'Wagon'), (8, 'Minivan'), (9, 'Small Car'), (10, 'Other')])),
                ('exterior_color', models.PositiveSmallIntegerField(choices=[(1, 'Black'), (2, 'Blue'), (3, 'Brown'), (4, 'Gold'), (5, 'Green'), (6, 'Gray'), (7, 'Pink'), (8, 'Purple'), (9, 'Red'), (10, 'Silver'), (11, 'Orange'), (12, 'White'), (13, 'Yellow'), (14, 'Charcoal'), (15, 'Off White'), (16, 'Tan'), (17, 'Beige'), (18, 'Burgundy'), (19, 'Turquoise')])),
                ('exterior_condition', models.PositiveSmallIntegerField(choices=[(1, 'New'), (2, 'Excellent'), (3, 'Very Good'), (4, 'Good'), (5, 'Fair'), (6, 'Poor')])),
                ('fuel_type', models.PositiveSmallIntegerField(choices=[(1, 'Diesel'), (2, 'Electric'), (3, 'Gasoline'), (4, 'Flex'), (5, 'Hybrid'), (6, 'Petrol'), (7, 'Plug-in hybrid'), (8, 'Other')])),
                ('interior_color', models.PositiveSmallIntegerField(choices=[(1, 'Black'), (2, 'Blue'), (3, 'Brown'), (4, 'Gold'), (5, 'Green'), (6, 'Gray'), (7, 'Pink'), (8, 'Purple'), (9, 'Red'), (10, 'Silver'), (11, 'Orange'), (12, 'White'), (13, 'Yellow'), (14, 'Charcoal'), (15, 'Off White'), (16, 'Tan'), (17, 'Beige'), (18, 'Burgundy'), (19, 'Turquoise')])),
                ('interior_condition', models.PositiveSmallIntegerField(choices=[(1, 'New'), (2, 'Excellent'), (3, 'Very Good'), (4, 'Good'), (5, 'Fair'), (6, 'Poor')])),
                ('location', models.TextField(blank=True, null=True)),
                ('make', models.PositiveSmallIntegerField(choices=[(1, 'Abarth'), (2, 'Alfa Romeo'), (3, 'Aston Martin'), (4, 'Audi'), (5, 'Bentley'), (6, 'BMW'), (7, 'Bugatti'), (8, 'Cadillac'), (9, 'Chevrolet'), (10, 'Chrysler'), (11, 'Citroën'), (12, 'Dacia'), (13, 'Daewoo'), (14, 'Daihatsu'), (15, 'Dodge'), (16, 'Donkervoort'), (17, 'DS'), (18, 'Ferrari'), (19, 'Fiat'), (20, 'Fisker'), (21, 'Ford'), (22, 'Honda'), (23, 'Hummer'), (24, 'Hyundai'), (25, 'Infiniti'), (26, 'Iveco'), (27, 'Jaguar'), (28, 'Jeep'), (29, 'Kia'), (30, 'KTM'), (31, 'Lada'), (32, 'Lamborghini'), (33, 'Lancia'), (34, 'Land Rover'), (35, 'Landwind'), (36, 'Lexus'), (37, 'Lotus'), (38, 'Maserati'), (39, 'Maybach'), (40, 'Mazda'), (41, 'McLaren'), (42, 'Mercedes-Benz'), (43, 'MG'), (44, 'Mini'), (45, 'Mitsubishi'), (46, 'Morgan'), (47, 'Nissan'), (48, 'Opel'), (49, 'Peugeot'), (50, 'Porsche'), (51, 'Renault'), (52, 'Rolls-Royce'), (53, 'Rover'), (54, 'Saab'), (55, 'Seat'), (56, 'Skoda'), (57, 'Smart'), (58, 'SsangYong'), (59, 'Subaru'), (60, 'Suzuki'), (61, 'Tesla'), (62, 'Toyota'), (63, 'Volkswagen'), (64, 'Volvo')])),
                ('mileage', models.IntegerField(blank=True, null=True)),
                ('model', models.CharField(blank=True, max_length=1500, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=100)),
                ('transmission', models.PositiveSmallIntegerField(choices=[(1, 'Manual Transmission'), (2, 'Automatic Transmission')])),
                ('trim', models.CharField(blank=True, max_length=1500, null=True)),
                ('vin', models.CharField(blank=True, max_length=20, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('photos', models.ManyToManyField(blank=True, null=True, to='api.ListingImage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('pch', models.TextField(blank=True, default='')),
                ('username', models.TextField(blank=True, default='')),
                ('categories', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('share_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubTaskCommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('link', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='api.NewPeticionCommentPost')),
            ],
        ),
        migrations.CreateModel(
            name='SubTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('link', models.TextField(blank=True, default='')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='api.Task')),
            ],
        ),
        migrations.CreateModel(
            name='SubFuentesCommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('link', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subFuentes', to='api.NewPeticionCommentPost')),
            ],
        ),
        migrations.CreateModel(
            name='SubFuentes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('link', models.TextField(blank=True, default='')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subfuentes', to='api.Task')),
            ],
        ),
        migrations.CreateModel(
            name='SubFactoresCommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('link', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subFactores', to='api.NewPeticionCommentPost')),
            ],
        ),
        migrations.CreateModel(
            name='SubFactores',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=1000)),
                ('description', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('video', models.FileField(blank=True, null=True, storage=backend.storage_backends.VideoStorage(), upload_to='')),
                ('link', models.TextField(blank=True, default='')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subfactores', to='api.Task')),
            ],
        ),
        migrations.CreateModel(
            name='StripeCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripeCustomerId', models.CharField(max_length=255)),
                ('stripeSubscriptionId', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SharedTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('shared_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shared_tasks', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Task')),
            ],
        ),
        migrations.CreateModel(
            name='RepresentativeSurveyEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('infrastructure_representative', models.BooleanField()),
                ('security_representative', models.BooleanField()),
                ('health_representative', models.BooleanField()),
                ('law_representative', models.BooleanField()),
                ('culture_representative', models.BooleanField()),
                ('education_representative', models.BooleanField()),
                ('sports_representative', models.BooleanField()),
                ('treasury_representative', models.BooleanField()),
                ('social_representative', models.BooleanField()),
                ('info_tech_representative', models.BooleanField()),
                ('misc_representative', models.BooleanField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RaffleEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripeCustomerId', models.CharField(max_length=255)),
                ('stripePaymentIntent', models.CharField(blank=True, max_length=255, null=True)),
                ('stripeSubscriptionId', models.CharField(blank=True, max_length=255, null=True)),
                ('payments', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'User'), (2, 'Editor'), (3, 'Admin'), (4, 'Galeana Biz driver')], default=1)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Approved'), (3, 'Banned')], default=2)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=100, null=True)),
                ('subscriptionActive', models.BooleanField(default=False)),
                ('freeAccount', models.BooleanField(default=False)),
                ('head_of_household', models.BooleanField(default=False)),
                ('image', models.URLField(blank=True, null=True)),
                ('calendar_event_categories', models.ManyToManyField(blank=True, to='api.CalendarEventCategory')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Group')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Postt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.Postt')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('blog', 'blog'), ('ad', 'ad'), ('announcement', 'announcement')], default='blog', max_length=25)),
                ('title', models.CharField(blank=True, max_length=150, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('contact', models.CharField(blank=True, max_length=150, null=True)),
                ('submittedOn', models.DateTimeField(auto_now=True)),
                ('imageURL', models.URLField(blank=True, null=True)),
                ('items', models.ManyToManyField(to='api.Item')),
            ],
        ),
        migrations.CreateModel(
            name='Portada',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PetitionEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('signature', models.URLField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now=True)),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Petition')),
            ],
        ),
        migrations.AddField(
            model_name='newpeticioncommentpost',
            name='aportacion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aportacion_comments', to='api.Task'),
        ),
        migrations.AddField(
            model_name='newpeticioncommentpost',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='newpeticioncommentpost',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.NewPeticionCommentPost'),
        ),
        migrations.AddField(
            model_name='newpeticioncommentpost',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Task'),
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('expire_date', models.DateTimeField()),
                ('favorites', models.IntegerField(default=0)),
                ('views', models.IntegerField(default=0)),
                ('callEnabled', models.BooleanField(default=True)),
                ('contact_email', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=100, null=True)),
                ('emailEnabled', models.BooleanField(default=True)),
                ('textEnabled', models.BooleanField(default=True)),
                ('category', models.PositiveSmallIntegerField(choices=[(1, 'Antiques & collectibles'), (2, 'Arts & Crafts'), (3, 'Auto Parts & Accessories'), (4, 'Baby Products'), (5, 'Bags & Luggage'), (6, 'Books, Movies & Music'), (7, 'Cell PHone & Accessories'), (8, 'Clothing, Shoes & Accessories'), (9, 'Electronics'), (10, 'Furniture'), (11, 'Health & Beauty'), (12, 'Home & Kitchen'), (13, 'Jewelry & Watches'), (14, 'Musical Instruments'), (15, 'Office Supplies'), (16, 'Patio & Garden'), (17, 'Pet Supplies'), (18, 'Sporting Goods'), (19, 'Tools & Home Improvement'), (20, 'Toys & Games'), (21, 'Vehicles'), (22, 'Video Games & Consoles'), (23, 'Miscellaneous'), (24, 'Buy/Sell Services')])),
                ('condition', models.PositiveSmallIntegerField(choices=[(1, 'New'), (2, 'Used - Like New'), (3, 'Used - Good'), (4, 'Used - Fair')])),
                ('description', models.TextField(blank=True, null=True)),
                ('location', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=100)),
                ('title', models.CharField(max_length=250)),
                ('photos', models.ManyToManyField(blank=True, null=True, to='api.ListingImage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LikeCommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='api.NewPeticionCommentPost')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LikeComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Comment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Task')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ImagenFija',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.DynamicImageStorage(), upload_to='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, storage=backend.storage_backends.ImagenText(), upload_to='')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='api.NuevoTask')),
            ],
        ),
        migrations.CreateModel(
            name='GroupMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Group')),
            ],
        ),
        migrations.CreateModel(
            name='ForumPostt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ForgotPasswordToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('token', models.TextField(unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('details', models.CharField(blank=True, max_length=1000, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Directory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('phone_number', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.TextField()),
                ('businessPage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.BusinessPage')),
            ],
        ),
        migrations.CreateModel(
            name='CredencialSurveyEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_credencial', models.BooleanField()),
                ('expiration_date', models.IntegerField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.Task'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ClassifiedFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Listing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vehicle_listing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.VehicleListing')),
            ],
        ),
        migrations.CreateModel(
            name='CategoryP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categoriesp', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('allDay', models.BooleanField(default=True)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('selectable', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.CalendarEventCategory')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessPagePost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.BusinessPage')),
                ('photos', models.ManyToManyField(blank=True, null=True, to='api.BusinessPagePhoto')),
            ],
        ),
        migrations.AddField(
            model_name='businesspage',
            name='banner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='banner', to='api.BusinessPagePhoto'),
        ),
        migrations.AddField(
            model_name='businesspage',
            name='photos',
            field=models.ManyToManyField(blank=True, null=True, to='api.BusinessPagePhoto'),
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('summary', models.CharField(blank=True, max_length=200, null=True)),
                ('thumb_nail', models.URLField(blank=True, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.SmallIntegerField(choices=[(1, 'Draft'), (2, 'Published'), (3, 'Hidden')], default=1)),
                ('security', models.SmallIntegerField(choices=[(1, 'Private'), (2, 'Public')], default=1)),
                ('createdBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='createdBy', to=settings.AUTH_USER_MODEL)),
                ('lastUpdatedBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lastUpdatedBy', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AgreementSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('agreement', models.CharField(blank=True, max_length=1000, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='pFavorito',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perfil', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perfiles_favoritos', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usuario_que_favoritos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'perfil')},
            },
        ),
        migrations.CreateModel(
            name='LikeP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes_received', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'profile')},
            },
        ),
        migrations.CreateModel(
            name='Favorito',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoritos', to='api.Task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoritos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'task')},
            },
        ),
    ]
